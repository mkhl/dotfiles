<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>(</key>
	<string>(&lt;#expression#&gt;)</string>
	<key>)</key>
	<string>(&lt;#%clipboard#&gt;)</string>
	<key>.</key>
	<string>"&lt;#key#&gt;" = "&lt;#value#&gt;";</string>
	<key>/</key>
	<string>/* &lt;#comment#&gt; */</string>
	<key>:</key>
	<string>:(&lt;#type#&gt;)&lt;#name#&gt;</string>
	<key>;</key>
	<string>[&lt;#message#&gt;];</string>
	<key>?</key>
	<string>&lt;#condition#&gt; ? &lt;#expression#&gt; : &lt;#expression#&gt;</string>
	<key>@</key>
	<string>@"&lt;#string#&gt;"</string>
	<key>Imp</key>
	<string>#import &lt;&lt;#header#&gt;&gt;</string>
	<key>[</key>
	<string>[&lt;#message#&gt;]</string>
	<key>]</key>
	<string>[&lt;#%clipboard#&gt;]</string>
	<key>a</key>
	<string>[[&lt;#class#&gt; alloc] &lt;#init#&gt;];</string>
	<key>aa</key>
	<string>[[[&lt;#class#&gt; alloc] &lt;#init&gt;#] autorelease];</string>
	<key>ac</key>
	<string>- (void)set&lt;#?Name=value#&gt;:(&lt;#?type=int#&gt;)&lt;#name#&gt; { _&lt;#name#&gt; = &lt;#name#&gt;; }
- (&lt;#type#&gt;)&lt;#name#&gt; { return _&lt;#name#&gt;; }
</string>
	<key>acc</key>
	<string>- (void)set&lt;#?Name=value#&gt;:(&lt;#?type=NSString *#&gt;)&lt;#name#&gt;
{
	[_&lt;#name#&gt; autorelease];
	_&lt;#name#&gt; = [&lt;#name#&gt; copy];
}
- (&lt;#type#&gt;)&lt;#name#&gt; { return _&lt;#name#&gt;; }
</string>
	<key>acr</key>
	<string>- (void)set&lt;#?Name=value#&gt;:(&lt;#?type=NSString *#&gt;)&lt;#name#&gt;
{
	[_&lt;#name#&gt; autorelease];
	_&lt;#name#&gt; = [&lt;#name#&gt; retain];
}
- (&lt;#type#&gt;)&lt;#name#&gt; { return _&lt;#name#&gt;; }
</string>
	<key>ah</key>
	<string>- (void)set&lt;#?Name=value#&gt;:(&lt;#?type=NSString *#&gt;)&lt;#name#&gt;;
- (&lt;#type#&gt;)&lt;#name#&gt;;
</string>
	<key>alert</key>
	<string>NSAlert *alert = [[[NSAlert alloc] init] autorelease];
[alert setMessageText:NSLocalizedString(@"&lt;#message#&gt;", @"")];
[alert setInformativeText:NSLocalizedString(@"&lt;#info#&gt;", @"")];
[alert addButtonWithTitle:NSLocalizedString(@"OK", @"")];
[alert runModal];
</string>
	<key>alertsheet</key>
	<string>NSAlert *alert = [[[NSAlert alloc] init] autorelease];
[alert setMessageText:NSLocalizedString(@"&lt;#message#&gt;", @"")];
[alert setInformativeText:NSLocalizedString(@"&lt;#info#&gt;", @"")];
[alert addButtonWithTitle:NSLocalizedString(@"OK", @"")];
[alert beginSheetModalForWindow:[self window] modalDelegate:self didEndSelector:@selector(alertDidEnd:returnCode:contextInfo:) contextInfo:NULL];

- (void)alertDidEnd:(NSAlert *)alert returnCode:(int)returnCode contextInfo:(void *)contextInfo
{
}
</string>
	<key>ao</key>
	<string>[NSArray arrayWithObject:&lt;#object#&gt;]</string>
	<key>aoo</key>
	<string>[NSArray arrayWithObjects:&lt;#firstObject#&gt;, nil]</string>
	<key>ar</key>
	<string>autorelease</string>
	<key>arg</key>
	<string>- (void)&lt;#methodname#&gt;:(NSString *)format, ...
{
	va_list argList;
	va_start(argList, format);
	format = [[NSString alloc] initWithFormat:format arguments:argList];
	va_end(argList);

	&lt;#statements#&gt;

	[format release];
}
</string>
	<key>awa</key>
	<string>- (void)awakeFromNib
{
	&lt;#statements#&gt;
}
</string>
	<key>bm</key>
	<string>NSTimeInterval t = [NSDate timeIntervalSinceReferenceDate];
&lt;#statements#&gt;
NSLog(@"duration %f", [NSDate timeIntervalSinceReferenceDate] - t); /* DEBUG LOG */
</string>
	<key>can</key>
	<string>[NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(&lt;#selector#&gt;) object:nil];</string>
	<key>cc</key>
	<string>const char *</string>
	<key>ci</key>
	<string>characterAtIndex:&lt;#index#&gt;</string>
	<key>cl</key>
	<string>@class &lt;#classname#&gt;;</string>
	<key>coding</key>
	<string>#pragma mark -
#pragma mark NSCoding

- (id)initWithCoder:(NSCoder *)decoder
{
	[super init];
	&lt;#?variable name=_object#&gt; = [[decoder decodeObjectForKey:@"&lt;#?key=object#&gt;"] retain];
	return self;
}

- (void)encodeWithCoder:(NSCoder *)encoder
{
	[encoder encodeObject:&lt;#variable name#&gt; forKey:@"&lt;#key#&gt;"];
}
</string>
	<key>copy</key>
	<string>#pragma mark -
#pragma mark NSCopying

- (id)copyWithZone:(NSZone *)zone
{
    return [self retain];
}
</string>
	<key>cs</key>
	<string>case &lt;#constant#&gt;:
	&lt;#statements#&gt;
	break;
</string>
	<key>d</key>
	<string>- (void)dealloc
{
	[&lt;#ivar#&gt; release];
	[super dealloc];
}
</string>
	<key>datasource</key>
	<string>#pragma mark -
#pragma mark NSTableDataSource

- (int)numberOfRowsInTableView:(NSTableView *)tableView
{
	return [&lt;#?sorted array=array#&gt; count];
}

- (id)tableView:(NSTableView *)tableView
	objectValueForTableColumn:(NSTableColumn *)tableColumn
	row:(int)rowIndex
{
	id object = [&lt;#sorted array#&gt; objectAtIndex:rowIndex];
	return [object valueForKey:[tableColumn identifier]];
}

- (void)tableView:(NSTableView *)tableView
	setObjectValue:(id)value
	forTableColumn:(NSTableColumn *)tableColumn
	row:(int)rowIndex {
	id object = [&lt;#sorted array#&gt; objectAtIndex:rowIndex];
	[object setValue:value forKey:[tableColumn identifier]];
}
</string>
	<key>def</key>
	<string>#define &lt;#key#&gt; &lt;#value#&gt;</string>
	<key>del</key>
	<string>[self performSelector:@selector(&lt;#selector#&gt;) withObject:&lt;#object#&gt; afterDelay:&lt;#delay#&gt;];</string>
	<key>dep</key>
	<string>[self setKeys:[NSArray arrayWithObjects:@"&lt;#firstKey#&gt;", nil]
	triggerChangeNotificationsForDependentKey:@"&lt;#dependentKey#&gt;"];</string>
	<key>dok</key>
	<string>[NSDictionary dictionaryWithObject:&lt;#object#&gt; forKey:&lt;#key#&gt;]</string>
	<key>doks</key>
	<string>[NSDictionary dictionaryWithObjectsAndKeys:
	&lt;#objectsAndKeys#&gt;,
	nil]</string>
	<key>during</key>
	<string>NS_DURING
	&lt;#statements#&gt;
NS_HANDLER
	NSLog(@"[%@ %@] - %@: %@",
		NSStringFromClass([self class]),
		NSStringFromSelector(_cmd),
		[localException name],
		[localException reason]);
NS_ENDHANDLER
</string>
	<key>dw</key>
	<string>do {
	&lt;#statements#&gt;
} while (&lt;#condition#&gt;);
</string>
	<key>enum</key>
	<string>NSEnumerator *&lt;#?enumerator name=enumerator#&gt; = [&lt;#?enumerated collection=array#&gt; objectEnumerator];
&lt;#?object type=id#&gt;&lt;#%ctypedelimiter#&gt;&lt;#?object name=object#&gt;;

while ((&lt;#object name#&gt; = [&lt;#enumerator name#&gt; nextObject]) != nil) {
	&lt;#statements#&gt;
}
</string>
	<key>es</key>
	<string>isEqualToString:@"&lt;#string#&gt;"</string>
	<key>f</key>
	<string>for (i = 0; i &lt; count; i++) {
	&lt;#statements#&gt;
}
</string>
	<key>ff</key>
	<string>[NSString stringWithFormat:@"&lt;#format#&gt;", &lt;#arguments#&gt;]</string>
	<key>fl</key>
	<string>for (i = 0; i &lt; length; i++) {
	unichar c = [&lt;#string#&gt; characterAtIndex:i];
	&lt;#statements#&gt;
}
</string>
	<key>fm</key>
	<string>NSFileManager *fileManager = [NSFileManager defaultManager];</string>
	<key>fmm</key>
	<string>[[NSFileManager defaultManager] &lt;#message#&gt;]</string>
	<key>forin</key>
	<string>for (&lt;#object#&gt; in &lt;#array#&gt;) {
	&lt;#statements#&gt;
}
</string>
	<key>fun</key>
	<string>&lt;#?return type=void#&gt;&lt;#%ctypedelimiter#&gt;&lt;#?name=function#&gt;(&lt;#arguments#&gt;)
{
	&lt;#statements#&gt;
}
</string>
	<key>h</key>
	<string>- (&lt;#type#&gt;)&lt;#methodname#&gt;;</string>
	<key>ha</key>
	<string>- (NSArray *)&lt;#methodname#&gt;;</string>
	<key>hb</key>
	<string>- (BOOL)&lt;#methodname#&gt;;</string>
	<key>hd</key>
	<string>- (NSDictionary *)&lt;#methodname#&gt;;</string>
	<key>hi</key>
	<string>- (int)&lt;#methodname#&gt;;</string>
	<key>hiba</key>
	<string>- (IBAction)&lt;#methodname#&gt;:(id)sender;</string>
	<key>hid</key>
	<string>- (id)&lt;#methodname#&gt;;</string>
	<key>hs</key>
	<string>- (NSString *)&lt;#methodname#&gt;;</string>
	<key>hv</key>
	<string>- (void)&lt;#methodname#&gt;;</string>
	<key>hx</key>
	<string>- (void)&lt;#methodname#&gt;:(id)sender;</string>
	<key>ic</key>
	<string>unsigned int i, count = [&lt;#array#&gt; count];</string>
	<key>id</key>
	<string>id &lt;&lt;#protocol#&gt;&gt;</string>
	<key>if</key>
	<string>if (&lt;#condition#&gt;) {
	&lt;#statements#&gt;
}</string>
	<key>iff</key>
	<string>#if &lt;#condition#&gt;
&lt;#statements#&gt;
#endif
</string>
	<key>ik</key>
	<string>isKindOfClass:[&lt;#classname#&gt; class]</string>
	<key>il</key>
	<string>unsigned int i, length = [&lt;#string#&gt; length];</string>
	<key>im</key>
	<string>@implementation &lt;#class#&gt; (&lt;#category#&gt;)
&lt;#statements#&gt;
@end
</string>
	<key>imp</key>
	<string>#import "&lt;#header#&gt;"</string>
	<key>in</key>
	<string>@interface &lt;#class#&gt; (&lt;#category#&gt;)
- (&lt;#type#&gt;)&lt;#methodname#&gt;;
@end
</string>
	<key>init</key>
	<string>- (id)init
{
	if (!(self = [super init]))
		return nil;
	&lt;#statements#&gt;
	return self;
}
</string>
	<key>isequal</key>
	<string>- (BOOL)isEqual:(id)object
{
	if (object == self)
		return YES;
	if (object == nil || ![object isKindOfClass:[self class]])
		return NO;
	return &lt;#expression#&gt;;
}
</string>
	<key>kvo</key>
	<string>#pragma mark -
#pragma mark KVO notifications

- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context
{
	if (object == [NSUserDefaultsController sharedUserDefaultsController]) {
		if ([keyPath isEqualToString:@"values.&lt;#key#&gt;"]) {
			&lt;#statements#&gt;;
		}
	}
}
</string>
	<key>kvod</key>
	<string>// unregister KVO
id controller = [NSUserDefaultsController sharedUserDefaultsController];
[controller removeObserver:self forKeyPath:@"values.&lt;#key#&gt;"];
</string>
	<key>kvoi</key>
	<string>// register for KVO
id controller = [NSUserDefaultsController sharedUserDefaultsController];
[controller addObserver:self forKeyPath:@"values.&lt;#key#&gt;" options:0 context:NULL];
</string>
	<key>l</key>
	<string>NSLog(@"&lt;#message#&gt;"); /* DEBUG LOG */</string>
	<key>ll</key>
	<string>NSLog(@"%@", &lt;#object#&gt;); /* DEBUG LOG */</string>
	<key>llf</key>
	<string>NSLog(@"&lt;#%clipboard#&gt;: %f", &lt;#%clipboard#&gt;); /* DEBUG LOG */</string>
	<key>llg</key>
	<string>NSLog(@"&lt;#%clipboard#&gt;: %@", NSStringFromRange(&lt;#%clipboard#&gt;)); /* DEBUG LOG */</string>
	<key>lli</key>
	<string>NSLog(@"&lt;#%clipboard#&gt;: %d", &lt;#%clipboard#&gt;); /* DEBUG LOG */</string>
	<key>llo</key>
	<string>NSLog(@"&lt;#%clipboard#&gt;: %@", &lt;#%clipboard#&gt;); /* DEBUG LOG */</string>
	<key>llp</key>
	<string>NSLog(@"&lt;#%clipboard#&gt;: %@", NSStringFromPoint(&lt;#%clipboard#&gt;)); /* DEBUG LOG */</string>
	<key>llr</key>
	<string>NSLog(@"&lt;#%clipboard#&gt;: %@", NSStringFromRect(&lt;#%clipboard#&gt;)); /* DEBUG LOG */</string>
	<key>lls</key>
	<string>NSLog(@"&lt;#%clipboard#&gt;: %@", NSStringFromSize(&lt;#%clipboard#&gt;)); /* DEBUG LOG */</string>
	<key>load</key>
	<string>+ (void)load
{
	NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
	&lt;#statements#&gt;
	[pool release];
}
</string>
	<key>ls</key>
	<string>NSLocalizedString(@"&lt;#string#&gt;", @"&lt;#comment#&gt;")</string>
	<key>lst</key>
	<string>NSLocalizedStringFromTable(@"&lt;#string#&gt;", @"&lt;#table#&gt;", @"&lt;#comment#&gt;")</string>
	<key>m</key>
	<string>- (&lt;#type#&gt;)&lt;#methodname#&gt;
{
	&lt;#statements#&gt;
}
</string>
	<key>ma</key>
	<string>- (NSArray *)&lt;#methodname#&gt;
{
	return &lt;#expression#&gt;;
}
</string>
	<key>mark</key>
	<string>#pragma mark -
#pragma mark &lt;#label#&gt;
</string>
	<key>mb</key>
	<string>- (BOOL)&lt;#methodname#&gt;
{
	return &lt;#expression#&gt;;
}
</string>
	<key>md</key>
	<string>- (NSDictionary *)&lt;#methodname#&gt;
{
	return &lt;#expression#&gt;;
}
</string>
	<key>me</key>
	<string>- (void)&lt;#methodname#&gt;:(NSEvent *)event
{
	&lt;#statements#&gt;
}
</string>
	<key>mi</key>
	<string>- (int)&lt;#methodname#&gt;
{
	return &lt;#expression#&gt;;
}
</string>
	<key>miba</key>
	<string>- (IBAction)&lt;#methodname#&gt;:(id)sender
{
	&lt;#statements#&gt;
}
</string>
	<key>mid</key>
	<string>- (id)&lt;#methodname#&gt;
{
	return &lt;#expression#&gt;;
}
</string>
	<key>mm</key>
	<string>#import "&lt;#filename#&gt;.h"</string>
	<key>mma</key>
	<string>#import &lt;AppKit/&lt;#classname#&gt;.h&gt;</string>
	<key>mmc</key>
	<string>#import &lt;Cocoa/Cocoa.h&gt;</string>
	<key>mmf</key>
	<string>#import &lt;Foundation/&lt;#classname#&gt;.h&gt;</string>
	<key>ms</key>
	<string>- (NSString *)&lt;#methodname#&gt;
{
	return &lt;#expression#&gt;;
}
</string>
	<key>mua</key>
	<string>NSMutableArray *array = [NSMutableArray array];</string>
	<key>mud</key>
	<string>NSMutableDictionary *dictionary = [NSMutableDictionary dictionary];</string>
	<key>mus</key>
	<string>NSMutableString *string = [NSMutableString stringWithCapacity:&lt;#capacity#&gt;];</string>
	<key>mv</key>
	<string>- (void)&lt;#methodname#&gt;
{
	&lt;#statements#&gt;
}
</string>
	<key>mx</key>
	<string>- (void)&lt;#methodname#&gt;:(id)sender
{
	&lt;#statements#&gt;
}
</string>
	<key>n</key>
	<string>- (void)&lt;#methodname#&gt;:(NSNotification *)notification
{
	&lt;#statements#&gt;
}
</string>
	<key>nb</key>
	<string>[NSNumber numberWithBool:&lt;#boolValue#&gt;]</string>
	<key>nc</key>
	<string>NSNotificationCenter *center = [NSNotificationCenter defaultCenter];</string>
	<key>ncm</key>
	<string>[[NSNotificationCenter defaultCenter] &lt;#message#&gt;]</string>
	<key>nd</key>
	<string>[NSNumber numberWithDouble:&lt;#doubleValue#&gt;]</string>
	<key>nf</key>
	<string>[NSNumber numberWithFloat:&lt;#floatValue#&gt;]</string>
	<key>ni</key>
	<string>[NSNumber numberWithInt:&lt;#intValue#&gt;]</string>
	<key>nib</key>
	<string>[NSBundle loadNibNamed:[[self class] description] owner:self];</string>
	<key>nsa</key>
	<string>NSArray *</string>
	<key>nsapp</key>
	<string>[NSApplication sharedApplication]</string>
	<key>nsd</key>
	<string>NSDictionary *</string>
	<key>nsma</key>
	<string>NSMutableArray *</string>
	<key>nsmd</key>
	<string>NSMutableDictionary *</string>
	<key>nsms</key>
	<string>NSMutableString *</string>
	<key>nsmt</key>
	<string>NSMutableSet *</string>
	<key>nsn</key>
	<string>NSNumber *</string>
	<key>nss</key>
	<string>NSString *</string>
	<key>nst</key>
	<string>NSSet *</string>
	<key>nui</key>
	<string>[NSNumber numberWithUnsignedInt:&lt;#unsignedIntValue#&gt;]</string>
	<key>obs</key>
	<string>[[NSNotificationCenter defaultCenter] addObserver:self
	selector:@selector(&lt;#selector#&gt;)
	name:&lt;#name#&gt;
	object:nil];</string>
	<key>oe</key>
	<string>objectEnumerator</string>
	<key>oi</key>
	<string>objectAtIndex:&lt;#index#&gt;</string>
	<key>ok</key>
	<string>objectForKey:&lt;#key#&gt;</string>
	<key>openpanel</key>
	<string>NSOpenPanel *openPanel = [NSOpenPanel openPanel];
[openPanel beginSheetForDirectory:&lt;#directory#&gt; file:@""
	types:[NSArray arrayWithObjects:@"&lt;#type#&gt;", nil]
	modalForWindow:window modalDelegate:self
	didEndSelector:@selector(openPanelDidEnd:returnCode:contextInfo:)
	contextInfo:NULL];

- (void)openPanelDidEnd:(NSOpenPanel *)openPanel
	returnCode:(int)returnCode
	contextInfo:(void *)contextInfo
{
	if (returnCode == NSOKButton) {
		NSEnumerator *filenames = [[openPanel filenames] objectEnumerator];
		NSString *path;

		while (path = [filenames nextObject]) {
			&lt;#statements#&gt;
		}
	}
}
</string>
	<key>p</key>
	<string>printf("&lt;#message#&gt;\n");</string>
	<key>plist</key>
	<string>NSBundle *bundle = [NSBundle bundleForClass:[self class]];
NSString *path = [bundle pathForResource:@"&lt;#?filename=filename#&gt;" ofType:@"&lt;#?filename extension=plist#&gt;"];
NSDictionary *&lt;#?variable name=dictionary#&gt; = [NSDictionary dictionaryWithContentsOfFile:path];
</string>
	<key>pool</key>
	<string>NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
&lt;#statements#&gt;
[pool release];
</string>
	<key>pose</key>
	<string>[self poseAsClass:[self superclass]];</string>
	<key>post</key>
	<string>[[NSNotificationCenter defaultCenter] postNotificationName:&lt;#name#&gt; object:self];
</string>
	<key>pp</key>
	<string>(&lt;#type#&gt;)&lt;#parameter#&gt;</string>
	<key>ppa</key>
	<string>(NSArray *)&lt;#parameter#&gt;</string>
	<key>ppb</key>
	<string>(BOOL)&lt;#parameter#&gt;</string>
	<key>ppd</key>
	<string>(NSDictionary *)&lt;#parameter#&gt;</string>
	<key>ppi</key>
	<string>(int)&lt;#parameter#&gt;</string>
	<key>pps</key>
	<string>(NSString *)&lt;#parameter#&gt;</string>
	<key>ppt</key>
	<string>(NSSet *)&lt;#parameter#&gt;</string>
	<key>ppui</key>
	<string>(unsigned int)&lt;#parameter#&gt;</string>
	<key>pro</key>
	<string>@protocol &lt;#protocolname#&gt;
- (void)&lt;#methodname#&gt;;
@end
</string>
	<key>ps</key>
	<string>performSelector:@selector(&lt;#selector#&gt;)</string>
	<key>r</key>
	<string>return &lt;#value#&gt;;</string>
	<key>res</key>
	<string>respondsToSelector:@selector(&lt;#selector#&gt;)</string>
	<key>rn</key>
	<string>return NO;</string>
	<key>ro</key>
	<string>[[NSNotificationCenter defaultCenter] removeObserver:self];</string>
	<key>rr</key>
	<string>[&lt;#object#&gt; release];</string>
	<key>rs</key>
	<string>return self;</string>
	<key>ry</key>
	<string>return YES;</string>
	<key>savepanel</key>
	<string>NSSavePanel *savePanel = [NSSavePanel savePanel];
[savePanel beginSheetForDirectory:&lt;#directory#&gt; file:@""
	modalForWindow:window modalDelegate:self
	didEndSelector:@selector(savePanelDidEnd:returnCode:contextInfo:)
	contextInfo:NULL];

- (void)savePanelDidEnd:(NSSavePanel *)savePanel
	returnCode:(int)returnCode
	contextInfo:(void *)contextInfo
{
	if (returnCode == NSOKButton) {
		NSString *path = [savePanel filename];
		&lt;#statements#&gt;
	}
}
</string>
	<key>sel</key>
	<string>@selector(&lt;#selector#&gt;)</string>
	<key>shi</key>
	<string>+ (&lt;#?class name=NSObject#&gt; *)&lt;#?method name=sharedInstance#&gt;
{
	static &lt;#class name#&gt; *&lt;#?variable name=singleton#&gt; = nil;
	if (&lt;#variable name#&gt; == nil)
		&lt;#variable name#&gt; = [[self alloc] init];
	return &lt;#variable name#&gt;;
}
</string>
	<key>so</key>
	<string>setObject:&lt;#object#&gt; forKey:&lt;#key#&gt;</string>
	<key>sv</key>
	<string>setValue:&lt;#value#&gt; forKey:&lt;#key#&gt;</string>
	<key>sw</key>
	<string>switch (&lt;#expression#&gt;) {
	case &lt;#constant#&gt;:
		&lt;#statements#&gt;
		break;
	default:
		break;
}
</string>
	<key>trigger</key>
	<string>[self setKeys:[NSArray arrayWithObjects:&lt;#firstKey#&gt;, nil]
	triggerChangeNotificationsForDependentKey:&lt;#dependentKey#&gt;];
</string>
	<key>u</key>
	<string>unsigned</string>
	<key>uc</key>
	<string>unsigned char</string>
	<key>ud</key>
	<string>NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];</string>
	<key>udb</key>
	<string>[[NSUserDefaults standardUserDefaults] boolForKey:@"&lt;#key#&gt;"]</string>
	<key>udi</key>
	<string>[[NSUserDefaults standardUserDefaults] integerForKey:@"&lt;#key#&gt;"]</string>
	<key>udm</key>
	<string>[[NSUserDefaults standardUserDefaults] &lt;#message#&gt;]</string>
	<key>uds</key>
	<string>[[NSUserDefaults standardUserDefaults] stringForKey:@"&lt;#key#&gt;"]</string>
	<key>udsb</key>
	<string>[[NSUserDefaults standardUserDefaults] setBool:&lt;#value#&gt; forKey:@"&lt;#key#&gt;"]</string>
	<key>udsi</key>
	<string>[[NSUserDefaults standardUserDefaults] setInteger:&lt;#value#&gt; forKey:@"&lt;#key#&gt;"]</string>
	<key>udso</key>
	<string>[[NSUserDefaults standardUserDefaults] setObject:&lt;#object#&gt; forKey:@"&lt;#key#&gt;"]</string>
	<key>ui</key>
	<string>unsigned int</string>
	<key>uni</key>
	<string>unichar</string>
	<key>v</key>
	<string>void</string>
	<key>vk</key>
	<string>valueForKey:&lt;#key#&gt;</string>
	<key>w</key>
	<string>while (&lt;#condition#&gt;) {
	&lt;#statements#&gt;
}
</string>
	<key>wo</key>
	<string>withObject:</string>
	<key>write</key>
	<string>writeToFile:&lt;#path#&gt; atomically:YES</string>
	<key>ws</key>
	<string>NSWorkspace *workspace = [NSWorkspace sharedWorkspace];</string>
	<key>wsm</key>
	<string>[[NSWorkspace sharedWorkspace] &lt;#message#&gt;]</string>
	<key>ww</key>
	<string>#warning &lt;#message#&gt;</string>
	<key>z</key>
	<string>+ (void)initialize
{
	if (self == [&lt;#classname#&gt; class]) {
		&lt;#statements#&gt;
	}
}
</string>
	<key>{</key>
	<string>{
	&lt;#statements#&gt;
}
</string>
	<key>}</key>
	<string>{ &lt;#statements#&gt; }</string>
</dict>
</plist>
