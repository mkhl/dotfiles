/**
    Based on:

    Objective C text macro specifications

    Copyright Â© 2004-2007 Apple Inc. All rights reserved.
*/

(
    //
    // Objective-C language macros
    // ===========================
    {
        Identifier = objc;
        Name = "Objective C";
        IsMenu = YES;
        IncludeContexts = ( "xcode.lang.objc" );
        ExcludeContexts = ( "xcode.lang.string",
                            "xcode.lang.character",
                            "xcode.lang.comment",
                            "xcode.lang.c.preprocessor" );
    },

        //
        // Exceptions
        // ----------
        {
            Identifier = objc.try;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "Try / Catch Block";
            TextString = "@try$(BlockSeparator){\n\t<#!statements!#>\n}$(PostBlockSeparator)@catch$(PreExpressionsSpacing)($(InExpressionsSpacing)NSException * error$(InExpressionsSpacing))$(BlockSeparator){\n\t<#handler#>\n}$(PostBlockSeparator)@finally$(BlockSeparator){\n\t<#statements#>\n}";
            CompletionPrefix = "@try";
            IncludeContexts = ( "xcode.lang.objc.block" );
        },
        {
            Identifier = objc.catch;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "Catch Block";
            TextString = "@catch$(PreExpressionsSpacing)($(InExpressionsSpacing)<#exception#>$(InExpressionsSpacing))$(BlockSeparator){\n\t<#!handler!#>\n}";
            CompletionPrefix = "@catch";
            IncludeContexts = ( "xcode.lang.objc.block" );
        },
        {
            Identifier = objc.finally;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "Finally Block";
            TextString = "@finally$(BlockSeparator){\n\t<#!handler!#>\n}";
            CompletionPrefix = "@finally";
            IncludeContexts = ( "xcode.lang.objc.block" );
        },

        //
        // Common Functions
        // ----------------
        {
            Identifier = objc.log;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "NSLog() Call";
            TextString = "NSLog$(PreFunctionArgsSpacing)($(InFunctionArgsSpacing)@\"<#message#>\"$(InFunctionArgsSpacing));";
            CompletionPrefix = log;
            IncludeContexts = ( "xcode.lang.objc.block" );
        },

        //
        // Expressions
        // -----------
        {
            Identifier = objc.bracket;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "Bracket Expression";
            TextString = "[<#!expression!#>]";
            // Disabled; moved to C
        },
        
        {
            Identifier = objc.string;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "NSString Literal";
            TextString = "@\"<#!string!#>\"";
            CompletionPrefix = str;
        },

        //
        // Common Messages
        // ---------------
        {
            Identifier = objc.allocinit;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "Alloc / Init Call";
            TextString = "[[<#!class!#> alloc] init]";
            CompletionPrefix = a;
        },
        {
            Identifier = objc.allocinitautorelease;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "Alloc / Init / Autorelease Call";
            TextString = "[[[<#!class!#> alloc] init] autorelease]";
            CompletionPrefix = aa;
        },
        {
            Identifier = objc.autorelease;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "Autorelease Call";
            TextString = "[<#!object!#> autorelease]";
            CompletionPrefix = ar;
        },
        {
            Identifier = objc.release;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "Release Call";
            TextString = "[<#!object!#> release]";
            CompletionPrefix = rr;
        },
        {
            Identifier = objc.poseasclass;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "Pose as Class";
            TextString = "[self poseAsClass:<#!class!#>];";
            CompletionPrefix = pose;
        },
        // Tests
        {
            Identifier = objc.msg.isequal;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "isEqual:";
            TextString = "isEqual:<#!object!#>";
            CompletionPrefix = eq;
        },
        {
            Identifier = objc.msg.isequaltostring;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "isEqualToString:";
            TextString = "isEqualToString:<#!string!#>";
            CompletionPrefix = es;
        },
        {
            Identifier = objc.msg.iskindofclass;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "isKindOfClass:";
            TextString = "isKindOfClass:[<#!class!#> class]";
            CompletionPrefix = ik;
        },
        // Accessors
        {
            Identifier = objc.msg.characteratindex;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "characterAtIndex:";
            TextString = "characterAtIndex:<#!index!#>";
            CompletionPrefix = ci;
        },
        {
            Identifier = objc.msg.objectenumerator;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "objectEnumerator";
            TextString = "objectEnumerator";
            CompletionPrefix = oe;
        },
        {
            Identifier = objc.msg.objectatindex;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "objectAtIndex:";
            TextString = "objectAtIndex:<#!index!#>";
            CompletionPrefix = oi;
        },
        {
            Identifier = objc.msg.objectforkey;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "objectForKey:";
            TextString = "objectForKey:<#!key!#>";
            CompletionPrefix = ok;
        },
        {
            Identifier = objc.msg.setobjectforkey;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "setObject:forKey:";
            TextString = "setObject:<#!object!#> forKey:<#key#>";
            CompletionPrefix = so;
        },
        {
            Identifier = objc.msg.valueforkey;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "valueForKey:";
            TextString = "valueForKey:<#!key!#>";
            CompletionPrefix = vk;
        },
        {
            Identifier = objc.msg.setvalueforkey;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "setValue:forKey:";
            TextString = "setValue:<#!value!#> forKey:<#key#>";
            CompletionPrefix = sv;
        },
        {
            Identifier = objc.msg.withobject;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "withObject:";
            TextString = "withObject:<#!object!#>";
            CompletionPrefix = wo;
        },
        // Other
        {
            Identifier = objc.msg.writetofile;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "writeToFile:atomically:";
            TextString = "writeToFile:<#!path!#> atomically:YES";
            CompletionPrefix = write;
        },

        //
        // Common Types
        // ------------
        {
            Identifier = objc.array;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "Array Declaration";
            TextString = "NSArray *array;";
            // CompletionPrefix = aa;
            // Disabled; moved to ObjC-Types
        },
        {
            Identifier = objc.mutablearray;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "Mutable Array Declaration";
            TextString = "NSMutableArray *array;";
            // CompletionPrefix = ma;
            // Disabled; moved to ObjC-Types
        },

        //
        // Iteration
        // ---------
        {
            Identifier = objc.arrayiteration.foreach;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "Array Foreach Loop";
            TextString = "for$(PreExpressionsSpacing)($(InExpressionsSpacing)<#object#> in <#array#>$(InExpressionsSpacing))$(BlockSeparator){\n\t<#!statements!#>\n}";
            CompletionPrefix = fore;
            IncludeContexts = ( "xcode.lang.objc.block" );
        },
        {
            Identifier = objc.arrayiteration;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "Array For Loop";
            TextString = "NSUInteger i, count = [<#array#> count];\nfor$(PreExpressionsSpacing)($(InExpressionsSpacing)i = 0; i < count; i++$(InExpressionsSpacing))$(BlockSeparator){\n\t<#object#> = [<#array#> objectAtIndex:i];\n\t<#!statements!#>\n}";
            CompletionPrefix = fora;
            IncludeContexts = ( "xcode.lang.objc.block" );
        },
        
        {
            Identifier = objc.stringiteration;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "String For Loop";
            TextString = "NSUInteger i, length = [<#string#> length];\nfor$(PreExpressionsSpacing)($(InExpressionsSpacing)i = 0; i < length; i++$(InExpressionsSpacing))$(BlockSeparator){\n\tunichar c = [<#string#> characterAtIndex:i];\n\t<#!statements!#>\n}";
            CompletionPrefix = fors;
        },
        
        {
            Identifier = objc.enumeration;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "Enumeration";
            TextString = "NSEnumerator *<#enumerator#> = [<#collection#> objectEnumerator];\n<#type#> <#object#>;\nwhile$(PreExpressionsSpacing)($(InExpressionsSpacing)($(InExpressionsSpacing)<#object#> = [<#enumerator#> nextObject]$(InExpressionsSpacing)) != nil$(InExpressionsSpacing))$(BlockSeparator){\n\t<#!statements!#>\n}";
            CompletionPrefix = oenum;
        },

        //
        // Methods Templates
        // -----------------
        {
            Identifier = objc.init;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "init Definition";
            TextString = "-$(PreMethodTypeSpacing)(id)$(PreMethodDeclSpacing)init$(FunctionBlockSeparator){\n\tself = [super init];\n\tif$(PreExpressionsSpacing)($(InExpressionsSpacing)self$(InExpressionsSpacing))$(BlockSeparator){\n\t\t<#!initializations!#>\n\t}\n\treturn self;\n}\n";
            // TextString = "-$(PreMethodTypeSpacing)(id)$(PreMethodDeclSpacing)init$(FunctionBlockSeparator){\n\tself = [super init];\n\tif$(PreExpressionsSpacing)($(InExpressionsSpacing)!self$(InExpressionsSpacing))\n\t\treturn nil;\n\t<#!initializations!#>\n\treturn self;\n}\n";
            CompletionPrefix = init;
            IncludeContexts = ( "xcode.lang.objc.implementation" );
            ExcludeContexts = ( "xcode.lang.objc.block" );
        },
        {
            Identifier = objc.init.body;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "-init Definition Body";
            TextString = "self = [super init];\n\tif$(PreExpressionsSpacing)($(InExpressionsSpacing)self$(InExpressionsSpacing))$(BlockSeparator){\n\t\t<#!initializations!#>\n\t}\n\treturn self;";
            // TextString = "self = [super init];\n\tif$(PreExpressionsSpacing)($(InExpressionsSpacing)!self$(InExpressionsSpacing))\n\t\treturn nil;\n\t<#!initializations!#>\n\treturn self;";
            CompletionPrefix = init;
            IncludeContexts = ( "xcode.lang.objc.block" );
        },
        {
            Identifier = objc.init.with;
            BasedOn = objc.init;
            IsMenuItem = NO;
            Name = "initWithObject Definition";
            TextString = "-$(PreMethodTypeSpacing)(id)$(PreMethodDeclSpacing)initWith<#Type#>$(PreColonSpacing):$(PostColonSpacing)(<#type#>)$(MessageArgSpacing)<#object#>$(FunctionBlockSeparator){\n\tself = [super initWith<#Type#>$(PreColonSpacing):$(PostColonSpacing)<#object#>];\n\tif$(PreExpressionsSpacing)($(InExpressionsSpacing)self$(InExpressionsSpacing))$(BlockSeparator){\n\t\t<#!initializations!#>\n\t}\n\treturn self;\n}\n";
            // TextString = "-$(PreMethodTypeSpacing)(id)$(PreMethodDeclSpacing)initWith<#Type#>$(PreColonSpacing):$(PostColonSpacing)(<#type#>)$(MessageArgSpacing)<#object#>$(FunctionBlockSeparator){\n\tself = [super initWith<#Type#>$(PreColonSpacing):$(PostColonSpacing)<#object#>];\n\tif$(PreExpressionsSpacing)($(InExpressionsSpacing)!self$(InExpressionsSpacing))\n\t\treturn nil;\n\t<#!initializations!#>\n\treturn self;\n}\n";
            CompletionPrefix = initwith;
        },
        
        {
            Identifier = objc.awakeFromNib;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "awakeFromNib Definition";
            TextString = "-$(PreMethodTypeSpacing)(void)$(PreMethodDeclSpacing)awakeFromNib$(FunctionBlockSeparator){\n\t<#!statements!#>\n}\n";
            CompletionPrefix = awakeFromNib;
            IncludeContexts = ( "xcode.lang.objc.implementation" );
            ExcludeContexts = ( "xcode.lang.objc.block" );
        },
        
        {
            Identifier = objc.dealloc;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "dealloc Definition";
            TextString = "-$(PreMethodTypeSpacing)(void)$(PreMethodDeclSpacing)dealloc$(FunctionBlockSeparator){\n\t<#!deallocations!#>\n\t[super dealloc];\n}\n";
            CompletionPrefix = dealloc;
            IncludeContexts = ( "xcode.lang.objc.implementation" );
            ExcludeContexts = ( "xcode.lang.objc.block" );
        },
        {
            Identifier = objc.finalize;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "finalize Definition";
            TextString = "-$(PreMethodTypeSpacing)(void)$(PreMethodDeclSpacing)finalize$(FunctionBlockSeparator){\n\t<#!finalizations!#>\n\t[super finalizations];\n}\n";
            CompletionPrefix = finalize;
            IncludeContexts = ( "xcode.lang.objc.implementation" );
            ExcludeContexts = ( "xcode.lang.objc.block" );
        },

        {
            Identifier = objc.observe;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "observeValueForKeyPath: Definition";
            TextString =
"-$(PreMethodTypeSpacing)(void)$(PreMethodDeclSpacing)observeValueForKeyPath$(PreColonSpacing):$(PostColonSpacing)(NSString *)$(MessageArgSpacing)keyPath ofObject$(PreColonSpacing):$(PostColonSpacing)(id)$(MessageArgSpacing)object change$(PreColonSpacing):$(PostColonSpacing)(NSDictionary *)$(MessageArgSpacing)change context$(PreColonSpacing):$(PostColonSpacing)(void *)$(MessageArgSpacing)context$(FunctionBlockSeparator){
    if$(PreExpressionsSpacing)($(InExpressionsSpacing)context == <#context#>$(InExpressionsSpacing))$(BlockSeparator){
		<#work#>
	}$(PostBlockSeparator)\telse$(BlockSeparator){
		[$(InMessageSpacing)super observeValueForKeyPath$(PreColonSpacing):$(PostColonSpacing)keyPath ofObject$(PreColonSpacing):$(PostColonSpacing)object change$(PreColonSpacing):$(PostColonSpacing)change context$(PreColonSpacing):$(PostColonSpacing)context$(InMessageSpacing)];
	}
}
";
            CompletionPrefix = observeValueForKeyPath;
            IncludeContexts = ( "xcode.lang.objc.implementation" );
            ExcludeContexts = ( "xcode.lang.objc.block" );
        },
        
        {
            Identifier = objc.observe.decl;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "observeValueForKeyPath: Declaration";
            TextString = "-$(PreMethodTypeSpacing)(void)$(PreMethodDeclSpacing)observeValueForKeyPath$(PreColonSpacing):$(PostColonSpacing)(NSString *)$(MessageArgSpacing)keyPath ofObject$(PreColonSpacing):$(PostColonSpacing)(id)$(MessageArgSpacing)object change$(PreColonSpacing):$(PostColonSpacing)(NSDictionary *)$(MessageArgSpacing)change context$(PreColonSpacing):$(PostColonSpacing)(void *)$(MessageArgSpacing)context;\n";
            CompletionPrefix = observeValueForKeyPath;
            IncludeContexts = ( "xcode.lang.objc.interface" );
            ExcludeContexts = ( "xcode.lang.objc.block" );
        },

        {
            Identifier = objc.bind;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "bind: Definition";
            TextString =
"-$(PreMethodTypeSpacing)(void)$(PreMethodDeclSpacing)bind$(PreColonSpacing):$(PostColonSpacing)(NSString *)$(MessageArgSpacing)binding toObject$(PreColonSpacing):$(PostColonSpacing)(id)$(MessageArgSpacing)observable withKeyPath$(PreColonSpacing):$(PostColonSpacing)(NSString *)$(MessageArgSpacing)keyPath options$(PreColonSpacing):$(PostColonSpacing)(NSDictionary *)$(MessageArgSpacing)options$(FunctionBlockSeparator){
	if$(PreExpressionsSpacing)($(InExpressionsSpacing)[$(InMessageSpacing)binding isEqualToString$(PreColonSpacing):$(PostColonSpacing)<#bindingName#>$(InMessageSpacing)]$(InExpressionsSpacing))$(BlockSeparator){
		[$(InMessageSpacing)observable addObserver$(PreColonSpacing):$(PostColonSpacing)self forKeyPath$(PreColonSpacing):$(PostColonSpacing)keyPath options$(PreColonSpacing):$(PostColonSpacing)0 context$(PreColonSpacing):$(PostColonSpacing)<#context#>$(InMessageSpacing)];
		<#store binding info#>
	}$(PostBlockSeparator)\telse$(BlockSeparator){
		[$(InMessageSpacing)super bind$(PreColonSpacing):$(PostColonSpacing)binding toObject$(PreColonSpacing):$(PostColonSpacing)observable withKeyPath$(PreColonSpacing):$(PostColonSpacing)keyPath options$(PreColonSpacing):$(PostColonSpacing)options$(InMessageSpacing)];
	}
}
";
            CompletionPrefix = bind;
            IncludeContexts = ( "xcode.lang.objc.implementation" );
            ExcludeContexts = ( "xcode.lang.objc.block" );
        },
        
        {
            Identifier = objc.observe.bind;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "bind: Declaration";
            TextString = "-$(PreMethodTypeSpacing)(void)$(PreMethodDeclSpacing)bind$(PreColonSpacing):$(PostColonSpacing)(NSString *)$(MessageArgSpacing)binding toObject$(PreColonSpacing):$(PostColonSpacing)(id)$(MessageArgSpacing)observable withKeyPath$(PreColonSpacing):$(PostColonSpacing)(NSString *)$(MessageArgSpacing)keyPath options$(PreColonSpacing):$(PostColonSpacing)(NSDictionary *)$(MessageArgSpacing)options;\n";
            // CompletionPrefix = bind;
            IncludeContexts = ( "xcode.lang.objc.interface" );
            ExcludeContexts = ( "xcode.lang.objc.block" );
            // Disabled; The identifier is all wrong ;)
        },
        {
            Identifier = objc.bind.decl;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "bind: Declaration";
            TextString = "-$(PreMethodTypeSpacing)(void)$(PreMethodDeclSpacing)bind$(PreColonSpacing):$(PostColonSpacing)(NSString *)$(MessageArgSpacing)binding toObject$(PreColonSpacing):$(PostColonSpacing)(id)$(MessageArgSpacing)observable withKeyPath$(PreColonSpacing):$(PostColonSpacing)(NSString *)$(MessageArgSpacing)keyPath options$(PreColonSpacing):$(PostColonSpacing)(NSDictionary *)$(MessageArgSpacing)options;\n";
            CompletionPrefix = bind;
            IncludeContexts = ( "xcode.lang.objc.interface" );
            ExcludeContexts = ( "xcode.lang.objc.block" );
        },
        
        {
            Identifier = objc.isequal;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "isEqual Definition";
            TextString = "-$(PreMethodTypeSpacing)(BOOL)$(PreMethodDeclSpacing)isEqual$(PreColonSpacing):$(PostColonSpacing)(id)$(MessageArgSpacing)object$(FunctionBlockSeparator){\n\tif$(PreExpressionsSpacing)($(InExpressionsSpacing)object == self$(InExpressionsSpacing))\n\t\treturn YES;\n\tif$(PreExpressionsSpacing)($(InExpressionsSpacing)object == nil || ![object isKindOfClass:[self class]]$(InExpressionsSpacing))\n\t\treturn NO;\n\treturn <#!expression!#>;\n}\n";
            CompletionPrefix = isEqual;
            IncludeContexts = ( "xcode.lang.objc.implementation" );
            ExcludeContexts = ( "xcode.lang.objc.block" );
        },
        
        {
            Identifier = objc.initialize;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "initialize Definition";
            TextString = "+$(PreMethodTypeSpacing)(void)$(PreMethodDeclSpacing)initialize$(FunctionBlockSeparator){\n\tif$(PreExpressionsSpacing)($(InExpressionsSpacing)self == [<#classname#> class]$(InExpressionsSpacing))$(BlockSeparator){\n\t\t<#!statements!#>\n\t}\n}\n";
            CompletionPrefix = initialize;
            IncludeContexts = ( "xcode.lang.objc.implementation" );
            ExcludeContexts = ( "xcode.lang.objc.block" );
        },
        
        {
            Identifier = objc.load;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "load Definition";
            TextString = "+$(PreMethodTypeSpacing)(void)$(PreMethodDeclSpacing)load$(FunctionBlockSeparator){\n\tNSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];\n\t<#!statements!#>\n\t[pool release];\n}\n";
            CompletionPrefix = load;
            IncludeContexts = ( "xcode.lang.objc.implementation" );
            ExcludeContexts = ( "xcode.lang.objc.block" );
        },
        
        {
            Identifier = objc.sharedInstance;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "sharedInstance Definition";
            TextString =
    "+$(PreMethodTypeSpacing)(<#class#> *)$(PreMethodDeclSpacing)<#sharedInstance#>$(FunctionBlockSeparator){\n\tstatic <#class#> *<#!singleton!#> = nil;\n\tif$(PreExpressionsSpacing)($(InExpressionsSpacing)<#singleton#> == nil$(InExpressionsSpacing))$(BlockSeparator){\n\t\t<#singleton#> = [[self alloc] init];\n\t}\n\treturn <#singleton#>;\n}\n";
            CompletionPrefix = sharedInstance;
            IncludeContexts = ( "xcode.lang.objc.implementation" );
            ExcludeContexts = ( "xcode.lang.objc.block" );
        },

        //
        // Classes and Protocols
        // ---------------------
        {
            Identifier = objc.class;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "@class Declaration";
            TextString = "@class <#!class!#>;";
            CompletionPrefix = "@class";
            ExcludeContexts = ( "xcode.lang.objc.implementation", "xcode.lang.objc.interface", "xcode.lang.objc.protocol" );
        },
        
        {
            Identifier = objc.interface;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "@interface Definition";
            TextString = "@interface <#class#> : <#superclass#>$(BlockSeparator){\n\t<#ivars#>\n}\n\n<#!methods!#>\n\n@end\n";
            CompletionPrefix = "@interface";
            ExcludeContexts = ( "xcode.lang.objc.implementation", "xcode.lang.objc.interface", "xcode.lang.objc.protocol" );
            CycleList = (
                objc.interface,
                objc.interface.category,
            );
        },
        {
            Identifier = objc.interface.category;
            BasedOn = objc.interface;
            IsMenuItem = YES;
            Name = "@interface Definition (Category)";
            TextString = "@interface <#class#> (<#category#>)\n\n<#!methods!#>\n\n@end\n";
            CompletionPrefix = "@interfacecat";
        },
        
        {
            Identifier = objc.implementation;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "@implementation Definition";
            TextString = "@implementation <#class#>\n\n<#!methods!#>\n\n@end\n";
            CompletionPrefix = "@implementation";
            ExcludeContexts = ( "xcode.lang.objc.implementation", "xcode.lang.objc.interface", "xcode.lang.objc.protocol" );
            CycleList = (
                objc.implementation,
                objc.implementation.category,
            );
        },
        {
            Identifier = objc.implementation.category;
            BasedOn = objc.implementation;
            IsMenuItem = YES;
            Name = "@implementation Definition (Category)";
            TextString = "@implementation <#class#> (<#category#>)\n\n<#!methods!#>\n\n@end\n";
            CompletionPrefix = "@implementationcat";
        },
        
        {
            Identifier = objc.protocol;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "@protocol Definition";
            TextString = "@protocol <#protocol#>\n\n<#methods#>\n\n@end\n";
            CompletionPrefix = "@protocol";
            ExcludeContexts = ( "xcode.lang.objc.implementation", "xcode.lang.objc.interface", "xcode.lang.objc.protocol" );
        },

        //
        // Properties
        // ----------
        {
            Identifier = objc.property;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "Property";
            TextString = "@property$(PreExpressionsSpacing)($(InExpressionsSpacing)<#options#>$(InExpressionsSpacing)) <#type#> <#!ivar!#>;";
            CompletionPrefix = "@property";
            IncludeContexts = ( "xcode.lang.objc.interface" );
            ExcludeContexts = ( "xcode.lang.objc.block" );
        },
        {
            Identifier = objc.dynamic;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "Dynamic Property Accessors";
            TextString = "@dynamic <#!property!#>;";
            CompletionPrefix = "@dynamic";
            IncludeContexts = ( "xcode.lang.objc.implementation" );
            ExcludeContexts = ( "xcode.lang.objc.block" );
        },
        {
            Identifier = objc.synthesize;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "Synthesize Property Accessors";
            TextString = "@synthesize <#!property!#>;";
            CompletionPrefix = "@synthesize";
            IncludeContexts = ( "xcode.lang.objc.implementation" );
            ExcludeContexts = ( "xcode.lang.objc.block" );
        },

        //
        // Accessors
        // ---------
        {
            Identifier = objc.accessor;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "Property Accessors (assign): Definition";
            NewValue = "<#value#>";
            OldValue = "";
            TextString = "-$(PreMethodTypeSpacing)(void)$(PreMethodDeclSpacing)set<#Name#>$(PreColonSpacing):$(PostColonSpacing)(<#type#>)$(MessageArgSpacing)<#value#>$(FunctionBlockSeparator){$(OldValue)\n\t<#name#> = $(NewValue);\n}\n-$(PreMethodTypeSpacing)(<#type#>)$(PreMethodDeclSpacing)<#!name!#>$(FunctionBlockSeparator){\n\treturn <#name#>;\n}\n";
            CompletionPrefix = ac;
            IncludeContexts = ( "xcode.lang.objc.implementation" );
            ExcludeContexts = ( "xcode.lang.objc.block" );
        },
        {
            Identifier = objc.accessor.copy;
            BasedOn = objc.accessor;
            IsMenuItem = YES;
            Name = "Property Accessors (copy): Definition";
            NewValue = "[<#value#> copy]";
            OldValue = "\n\t[<#name#> autorelease];";
            CompletionPrefix = acc;
        },
        {
            Identifier = objc.accessor.retain;
            BasedOn = objc.accessor;
            IsMenuItem = YES;
            Name = "Property Accessors (retain): Definition";
            NewValue = "[<#value#> retain]";
            OldValue = "\n\t[<#name#> autorelease];";
            CompletionPrefix = acr;
        },
        {
            Identifier = objc.accessor.decl;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "Property Accessors: Declaration";
            TextString = "-$(PreMethodTypeSpacing)(void)$(PreMethodDeclSpacing)set<#Name#>$(PreColonSpacing):$(PostColonSpacing)(<#type#>)$(MessageArgSpacing)<#value#>;\n-$(PreMethodTypeSpacing)(<#type#>)$(PreMethodDeclSpacing)<#!name!#>;";
            CompletionPrefix = ac;
            IncludeContexts = ( "xcode.lang.objc.interface" );
            ExcludeContexts = ( "xcode.lang.objc.block" );
        },

        //
        // Common Class Shorthands
        // -----------------------
        //
        // Moved to ObjC-Types.
        //
        {
            Identifier = objc.nss;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "NSString";
            TextString = "NSString";
            // CompletionPrefix = nss;
        },
        {
            Identifier = objc.nsms;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "NSMutableString";
            TextString = "NSMutableString";
            // CompletionPrefix = nsms;
        },
        {
            Identifier = objc.nsa;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "NSArray";
            TextString = "NSArray";
            // CompletionPrefix = nsa;
        },
        {
            Identifier = objc.nsma;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "NSMutableArray";
            TextString = "NSMutableArray";
            // CompletionPrefix = nsma;
        },
        {
            Identifier = objc.nsd;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "NSDictionary";
            TextString = "NSDictionary";
            // CompletionPrefix = nsd;
        },
        {
            Identifier = objc.nsmd;
            BasedOn = objc;
            IsMenuItem = NO;
            Name = "NSMutableDictionary";
            TextString = "NSMutableDictionary";
            // CompletionPrefix = nsmd;
        },

        //
        // Selector Macros
        // ---------------
        {
            Identifier = objc.selector;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "@selector Expression";
            TextString = "@selector$(PreFunctionArgsSpacing)($(InFunctionArgsSpacing)<#!selector!#>$(InFunctionArgsSpacing))";
            CompletionPrefix = "@selector";
        },
        {
            Identifier = objc.respondsto;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "respondsToSelector: Call";
            TextString = "respondsToSelector:@selector$(PreFunctionArgsSpacing)($(InFunctionArgsSpacing)<#!selector!#>$(InFunctionArgsSpacing))";
            CompletionPrefix = res;
        },
        {
            Identifier = objc.perform;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "performSelector: Call";
            TextString = "performSelector:@selector$(PreFunctionArgsSpacing)($(InFunctionArgsSpacing)<#!selector!#>$(InFunctionArgsSpacing))";
            CompletionPrefix = per;
        },
        {
            Identifier = objc.delay.perform;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "Delayed performSelector: Call";
            TextString = "performSelector:@selector$(PreFunctionArgsSpacing)($(InFunctionArgsSpacing)<#!selector!#>$(InFunctionArgsSpacing)) withObject:<#object#> afterDelay:<#delay#>";
            CompletionPrefix = del;
        },
        {
            Identifier = objc.delay.cancel;
            BasedOn = objc;
            IsMenuItem = YES;
            Name = "Delayed performSelector: Cancel";
            TextString = "[NSObject cancelPreviousPerformRequestsWithTarget:<#target#> selector:@selector$(PreFunctionArgsSpacing)($(InFunctionArgsSpacing)<#!selector!#>$(InFunctionArgsSpacing)) object:<#object#>];";
            CompletionPrefix = can;
        },
)
