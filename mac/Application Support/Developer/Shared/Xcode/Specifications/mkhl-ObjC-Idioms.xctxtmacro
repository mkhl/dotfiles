(
    //
    // Objective-C Idioms
    // ==================
    {
        Identifier = objc.idiom;
        Name = "Objective C Idioms";
        IsMenu = YES;
        IncludeContexts = ( "xcode.lang.objc" );
        ExcludeContexts = ( "xcode.lang.string",
                            "xcode.lang.character",
                            "xcode.lang.comment",
                            "xcode.lang.c.preprocessor" );
    },

        //
        // Bundles
        // -------
        {
            Identifier = objc.idiom.nib;
            BasedOn = objc.idiom;
            IsMenuItem = YES;
            Name = "Load Nib from Bundle";
            TextString = "[NSBundle loadNibNamed:[[self class] description] owner:self];";
            CompletionPrefix = nib;
        },
        {
            Identifier = objc.idiom.plist;
            BasedOn = objc.idiom;
            IsMenuItem = YES;
            Name = "Load Resource from Bundle";
            TextString = "NSBundle *bundle = [NSBundle bundleForClass:[self class]];\nNSString *path = [bundle pathForResource:<#!filename!#> ofType:<#plist#>];\nNSDictionary *<#dict#> = [NSDictionary dictionaryWithContentsOfFile:path];\n";
            CompletionPrefix = plist;
        },

        //
        // Protocols
        // ---------
        {
            Identifier = objc.idiom.coding;
            BasedOn = objc.idiom;
            IsMenuItem = YES;
            Name = "NSCoding Implementation";
            TextString =
"#pragma mark -
#pragma mark NSCoding

-$(PreMethodTypeSpacing)(id)$(PreMethodDeclSpacing)initWithCoder$(PreColonSpacing):$(PostColonSpacing)(NSCoder *)$(MessageArgSpacing)decoder$(FunctionBlockSeparator){
	[super init];
	<#!variable!#> = [[decoder decodeObjectForKey:@\"<#key#>\"] retain];
	return self;
}

-$(PreMethodTypeSpacing)(void)$(PreMethodDeclSpacing)encodeWithCoder$(PreColonSpacing):$(PostColonSpacing)(NSCoder *)$(MessageArgSpacing)encoder$(FunctionBlockSeparator){
	[encoder encodeObject:<#variable#> forKey:@\"<#key#>\"];
}
";
            CompletionPrefix = coding;
        },
        {
            Identifier = objc.idiom.copying;
            BasedOn = objc.idiom;
            IsMenuItem = YES;
            Name = "NSCopying Implementation";
            TextString =
"#pragma mark -
#pragma mark NSCopying

-$(PreMethodTypeSpacing)(id)$(PreMethodDeclSpacing)copyWithZone$(PreColonSpacing):$(PostColonSpacing)(NSZone *)$(MessageArgSpacing)zone(FunctionBlockSeparator){
    return [self retain];
}
";
            CompletionPrefix = copy;
        },
        {
            Identifier = objc.idiom.tabledatasource;
            BasedOn = objc.idiom;
            IsMenuItem = YES;
            Name = "NSTableDataSource Implementation";
            TextString =
"#pragma mark -
#pragma mark NSTableDataSource

-$(PreMethodTypeSpacing)(int)$(PreMethodDeclSpacing)numberOfRowsInTableView$(PreColonSpacing):$(PostColonSpacing)(NSTableView *)$(MessageArgSpacing)tableView(FunctionBlockSeparator){
	return [<#!array!#> count];
}

-$(PreMethodTypeSpacing)(id)$(PreMethodDeclSpacing)tableView$(PreColonSpacing):$(PostColonSpacing)(NSTableView *)$(MessageArgSpacing)tableView
	objectValueForTableColumn$(PreColonSpacing):$(PostColonSpacing)(NSTableColumn *)$(MessageArgSpacing)tableColumn
	row$(PreColonSpacing):$(PostColonSpacing)(int)$(MessageArgSpacing)rowIndex$(FunctionBlockSeparator){
	id object = [<#array#> objectAtIndex:rowIndex];
	return [object valueForKey:[tableColumn identifier]];
}

-$(PreMethodTypeSpacing)(void)$(PreMethodDeclSpacing)tableView$(PreColonSpacing):$(PostColonSpacing)(NSTableView *)$(MessageArgSpacing)tableView
	setObjectValue$(PreColonSpacing):$(PostColonSpacing)(id)$(MessageArgSpacing)value
	forTableColumn$(PreColonSpacing):$(PostColonSpacing)(NSTableColumn *)$(MessageArgSpacing)tableColumn
	row$(PreColonSpacing):$(PostColonSpacing)(int)$(MessageArgSpacing)rowIndex$(FunctionBlockSeparator){
	id object = [<#array#> objectAtIndex:rowIndex];
	[object setValue:value forKey:[tableColumn identifier]];
}
";
            CompletionPrefix = datasource;
        },

        //
        // KVO
        // ---
        {
            Identifier = objc.idiom.kvo;
            BasedOn = objc.idiom;
            IsMenuItem = YES;
            Name = "KVO Notifications";
            TextString =
"#pragma mark -
#pragma mark KVO Notifications

-$(PreMethodTypeSpacing)(void)$(PreMethodDeclSpacing)observeValueForKeyPath$(PreColonSpacing):$(PostColonSpacing)(NSString *)$(MessageArgSpacing)keyPath
	ofObject$(PreColonSpacing):$(PostColonSpacing)(id)$(MessageArgSpacing)object
	change$(PreColonSpacing):$(PostColonSpacing)(NSDictionary *)$(MessageArgSpacing)change
	context$(PreColonSpacing):$(PostColonSpacing)(void *)$(MessageArgSpacing)context$(FunctionBlockSeparator){
	if$(PreExpressionsSpacing)($(InExpressionsSpacing)object == [NSUserDefaultsController sharedUserDefaultsController]$(InExpressionsSpacing))$(BlockSeparator){
		if$(PreExpressionsSpacing)($(InExpressionsSpacing)[keyPath isEqualToString:@\"values.<#key#>\"]$(InExpressionsSpacing))$(BlockSeparator){
			<#!statements!#>;
		}
	}
}
";
            CompletionPrefix = kvo;
        },
        {
            Identifier = objc.idiom.kvo.register;
            BasedOn = objc.idiom;
            IsMenuItem = YES;
            Name = "KVO: Register self";
            TextString =
"// Register for KVO
id controller = [NSUserDefaultsController sharedUserDefaultsController];
[controller addObserver:self forKeyPath:<#!keyPath!#> options:0 context:NULL];
";
            CompletionPrefix = kvor;
        },
        {
            Identifier = objc.idiom.kvo.unregister;
            BasedOn = objc.idiom;
            IsMenuItem = YES;
            Name = "KVO: Unregister self";
            TextString =
"// Unregister KVO
id controller = [NSUserDefaultsController sharedUserDefaultsController];
[controller removeObserver:self forKeyPath:<#!keyPath!#>];
";
            CompletionPrefix = kvou;
        },
        {
            Identifier = objc.idiom.kvo.accessor;
            BasedOn = objc.idiom;
            IsMenuItem = YES;
            Name = "KVO: Accessors";
            TextString =
"[self willChangeValueForKey:<#keypath#>];
<#!statements!#>
[self didChangeValueForKey:<#keypath#>];";
            CompletionPrefix = kvoac;
        },

    //
    // GUI
    // ---
    {
        Identifier = objc.idiom.alert;
        BasedOn = objc.idiom;
        IsMenuItem = YES;
        Name = "Alert Dialog";
        TextString =
"NSAlert *alert = [[[NSAlert alloc] init] autorelease];
[alert setMessageText:<#!message!#>];
[alert setInformativeText:<#info#>];
[alert addButtonWithTitle:<#@\"OK\"#>];
[alert runModal];
";
        CompletionPrefix = alert;
    },
    {
        Identifier = objc.idiom.alertsheet;
        BasedOn = objc.idiom;
        IsMenuItem = YES;
        Name = "Alert Sheet";
        TextString =
"NSAlert *alert = [[[NSAlert alloc] init] autorelease];
[alert setMessageText:<#message#>];
[alert setInformativeText:<#info#>];
[alert addButtonWithTitle:<#@\"OK\"#>];
[alert beginSheetModalForWindow:[self window]
	modalDelegate:self
	didEndSelector:@selector$(PreFunctionArgsSpacing)($(InFunctionArgsSpacing)alertDidEnd:returnCode:contextInfo:$(InFunctionArgsSpacing))
	contextInfo:NULL];

-$(PreMethodTypeSpacing)(void)$(PreMethodDeclSpacing)alertDidEnd$(PreColonSpacing):$(PostColonSpacing)(NSAlert *)$(MessageArgSpacing)alert
	returnCode:$(PreColonSpacing):$(PostColonSpacing)(NSInteger)$(MessageArgSpacing)returnCode
	contextInfo$(PreColonSpacing):$(PostColonSpacing)(void *)$(MessageArgSpacing)contextInfo$(FunctionBlockSeparator){
    <#statements#>
}
";
        CompletionPrefix = alertsheet;
    },
    {
        Identifier = objc.idiom.openpanel;
        BasedOn = objc.idiom;
        IsMenuItem = YES;
        Name = "Open Panel";
        TextString =
"NSOpenPanel *openPanel = [NSOpenPanel openPanel];
[openPanel beginSheetForDirectory:<#directory#>
	file:<#file#>
	types:<#types#>
	modalForWindow:window
	modalDelegate:self
	didEndSelector:@selector$(PreFunctionArgsSpacing)($(InFunctionArgsSpacing)openPanelDidEnd:returnCode:contextInfo:$(InFunctionArgsSpacing))
	contextInfo:NULL];

-$(PreMethodTypeSpacing)(void)$(PreMethodDeclSpacing)openPanelDidEnd$(PreColonSpacing):$(PostColonSpacing)(NSOpenPanel *)$(MessageArgSpacing)openPanel
	returnCode$(PreColonSpacing):$(PostColonSpacing)(int)$(MessageArgSpacing)returnCode
	contextInfo$(PreColonSpacing):$(PostColonSpacing)(void *)$(MessageArgSpacing)contextInfo$(FunctionBlockSeparator){
    if$(PreExpressionsSpacing)($(InExpressionsSpacing)returnCode == NSOKButton$(InExpressionsSpacing))$(BlockSeparator){
        for$(PreExpressionsSpacing)($(InExpressionsSpacing)NSString *path in [openPanel filenames]$(InExpressionsSpacing))$(BlockSeparator){
            <#!statements!#>
        }
    }
}
";
        CompletionPrefix = openpanel;
    },
    {
        Identifier = objc.idiom.savepanel;
        BasedOn = objc.idiom;
        IsMenuItem = YES;
        Name = "Open Panel";
        TextString =
"NSSavePanel *savePanel = [NSSavePanel savePanel];
[savePanel beginSheetForDirectory:<#directory#>
	file:<#file#>
	modalForWindow:window
	modalDelegate:self
	didEndSelector:@selector$(PreFunctionArgsSpacing)($(InFunctionArgsSpacing)savePanelDidEnd:returnCode:contextInfo:$(InFunctionArgsSpacing))
	contextInfo:NULL];

-$(PreMethodTypeSpacing)(void)$(PreMethodDeclSpacing)savePanelDidEnd$(PreColonSpacing):$(PostColonSpacing)(NSSavePanel *)$(MessageArgSpacing)savePanel
	returnCode$(PreColonSpacing):$(PostColonSpacing)(int)$(MessageArgSpacing)returnCode
	contextInfo$(PreColonSpacing):$(PostColonSpacing)(void *)$(MessageArgSpacing)contextInfo$(FunctionBlockSeparator){
	if$(PreExpressionsSpacing)($(InExpressionsSpacing)returnCode == NSOKButton$(InExpressionsSpacing))$(BlockSeparator){
		NSString *path = [savePanel filename];
		<#!statements!#>
	}
}
";
        CompletionPrefix = savepanel;
    },

    //
    // Notifications
    // -------------
    {
        Identifier = objc.idiom.notification.observe;
        BasedOn = objc.idiom;
        IsMenuItem = YES;
        Name = "Notification: Add as Observer";
        TextString = "[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector$(PreFunctionArgsSpacing)($(InFunctionArgsSpacing)<#!selector!#>$(InFunctionArgsSpacing)) name:<#!name!#> object:<#object#>];";
        CompletionPrefix = obs;
    },
    {
        Identifier = objc.idiom.notification.remove;
        BasedOn = objc.idiom;
        IsMenuItem = YES;
        Name = "Notification: Remove as Observer";
        TextString = "[[NSNotificationCenter defaultCenter] removeObserver:self];";
        CompletionPrefix = rob;
    },
    {
        Identifier = objc.idiom.notification.post;
        BasedOn = objc.idiom;
        IsMenuItem = YES;
        Name = "Notification: Post Notification";
        TextString = "[[NSNotificationCenter defaultCenter] postNotificationName:<#!name!#> object:self];";
        CompletionPrefix = post;
    },
    {
        Identifier = objc.idiom.notification.dependent;
        BasedOn = objc.idiom;
        IsMenuItem = YES;
        Name = "Notification: Trigger Notifications for Dependent Keys";
        TextString = "[self setKeys:<#!keys!#> triggerChangeNotificationsForDependentKey:<#dependentKey#>];";
        CompletionPrefix = trig;
    },

    //
    // Other Idioms
    // ------------
    {
        Identifier = objc.idiom.benchmark;
        BasedOn = objc.idiom;
        IsMenuItem = YES;
        Name = "Wrap with Mini-Benchmark";
        TextString =
"NSTimeInterval t = [NSDate timeIntervalSinceReferenceDate];
<#!statements!#>
NSLog(@\"Duration: %f\", [NSDate timeIntervalSinceReferenceDate] - t); /* DEBUG LOG */
";
        CompletionPrefix = bm;
    },
    {
        Identifier = objc.idiom.during;
        BasedOn = objc.idiom;
        IsMenuItem = YES;
        Name = "Wrap with NS_DURING handler";
        TextString =
"NS_DURING
	<#!statements!#>
NS_HANDLER
	NSLog(@\"[%@ %@] - %@: %@\",
	      NSStringFromClass([self class]),
	      NSStringFromSelector(_cmd),
	      [localException name],
	      [localException reason]);
NS_ENDHANDLER
";
        CompletionPrefix = during;
    },
    {
        Identifier = objc.idiom.autoreleasepool;
        BasedOn = objc.idiom;
        IsMenuItem = YES;
        Name = "Wrap with NSAutoReleasePool";
        TextString = "NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];\n<#!statements!#>\n[pool release];\n";
        CompletionPrefix = pool;
    },
)
